
// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview AI-powered marks suggestion flow for specific assessment components.
 *
 * - generateMarksSuggestions - A function that suggests marks for students based on PRN, name, subject, assessment type and max marks for that component.
 * - GenerateMarksSuggestionsInput - The input type for the generateMarksSuggestions function.
 * - GenerateMarksSuggestionsOutput - The return type for the generateMarksSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { AssessmentType } from '@/types'; // Import AssessmentType
import { ASSESSMENT_MAX_SCORES } from '@/types';

const assessmentTypeKeys = Object.keys(ASSESSMENT_MAX_SCORES) as [AssessmentType, ...AssessmentType[]];


const GenerateMarksSuggestionsInputSchema = z.object({
  prn: z.string().describe('Student PRN number.'),
  name: z.string().describe('Student name.'),
  subject: z.string().describe('Subject for which marks are to be suggested.'),
  assessmentType: z.enum(assessmentTypeKeys).describe('The specific assessment component (e.g., CA1, MidSem).'),
  maxMarks: z.number().describe('Maximum possible marks for this specific assessment component (e.g., 10 for CA1, 20 for MidSem).'),
});
export type GenerateMarksSuggestionsInput = z.infer<typeof GenerateMarksSuggestionsInputSchema>;

const GenerateMarksSuggestionsOutputSchema = z.object({
  suggestedMarks: z.number().describe('Suggested marks for the student in the specified subject and assessment component.'),
  reason: z.string().describe('Reasoning behind the suggested marks.'),
});
export type GenerateMarksSuggestionsOutput = z.infer<typeof GenerateMarksSuggestionsOutputSchema>;

export async function generateMarksSuggestions(input: GenerateMarksSuggestionsInput): Promise<GenerateMarksSuggestionsOutput> {
  return generateMarksSuggestionsFlow(input);
}

const generateMarksSuggestionsPrompt = ai.definePrompt({
  name: 'generateMarksSuggestionsPrompt',
  input: {schema: GenerateMarksSuggestionsInputSchema},
  output: {schema: GenerateMarksSuggestionsOutputSchema},
  prompt: `You are an AI assistant that helps teachers by suggesting marks for specific assessment components of a subject.

  Given the student's PRN, name, subject, the specific assessment type (like CA1, MidSem, EndSem), and the maximum possible marks for that component, suggest appropriate marks (integer, no decimals) and provide a brief reason for your suggestion. The suggested marks should not exceed the maximum marks for the component.

  Student PRN: {{{prn}}}
  Student Name: {{{name}}}
  Subject: {{{subject}}}
  Assessment Type: {{{assessmentType}}}
  Maximum Marks for this Component: {{{maxMarks}}}

  Please provide the suggested marks and the reason. The suggested marks must be an integer.
  For example, if maxMarks is 10, suggestedMarks could be 7 or 8, but not 7.5 or 11.
  Consider the nature of the assessment (e.g., CA might be easier to score high in than EndSem).
  Base your suggestion on typical student performance patterns for the given assessment component and subject.
  `,
});

const generateMarksSuggestionsFlow = ai.defineFlow(
  {
    name: 'generateMarksSuggestionsFlow',
    inputSchema: GenerateMarksSuggestionsInputSchema,
    outputSchema: GenerateMarksSuggestionsOutputSchema,
  },
  async input => {
    const {output} = await generateMarksSuggestionsPrompt(input);
    // Ensure suggested marks are integers and within bounds
    if (output && output.suggestedMarks) {
        output.suggestedMarks = Math.min(Math.max(0, Math.round(output.suggestedMarks)), input.maxMarks);
    }
    return output!;
  }
);
