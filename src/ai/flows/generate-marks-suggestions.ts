// This file is generated by Firebase Genkit.
'use server';
/**
 * @fileOverview AI-powered marks suggestion flow.
 *
 * - generateMarksSuggestions - A function that suggests marks for students based on PRN and names.
 * - GenerateMarksSuggestionsInput - The input type for the generateMarksSuggestions function.
 * - GenerateMarksSuggestionsOutput - The return type for the generateMarksSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateMarksSuggestionsInputSchema = z.object({
  prn: z.string().describe('Student PRN number.'),
  name: z.string().describe('Student name.'),
  subject: z.string().describe('Subject for which marks are to be suggested.'),
  maxMarks: z.number().describe('Maximum possible marks for the subject.'),
});
export type GenerateMarksSuggestionsInput = z.infer<typeof GenerateMarksSuggestionsInputSchema>;

const GenerateMarksSuggestionsOutputSchema = z.object({
  suggestedMarks: z.number().describe('Suggested marks for the student in the specified subject.'),
  reason: z.string().describe('Reasoning behind the suggested marks.'),
});
export type GenerateMarksSuggestionsOutput = z.infer<typeof GenerateMarksSuggestionsOutputSchema>;

export async function generateMarksSuggestions(input: GenerateMarksSuggestionsInput): Promise<GenerateMarksSuggestionsOutput> {
  return generateMarksSuggestionsFlow(input);
}

const generateMarksSuggestionsPrompt = ai.definePrompt({
  name: 'generateMarksSuggestionsPrompt',
  input: {schema: GenerateMarksSuggestionsInputSchema},
  output: {schema: GenerateMarksSuggestionsOutputSchema},
  prompt: `You are an AI assistant that helps teachers by suggesting marks for students.

  Given the student's PRN, name, subject, and maximum possible marks, suggest appropriate marks and provide a brief reason for your suggestion.

  PRN: {{{prn}}}
  Name: {{{name}}}
  Subject: {{{subject}}}
  Maximum Marks: {{{maxMarks}}}

  Please provide the suggested marks and the reason in the following format:
  {"suggestedMarks": <marks>, "reason": <reason>}`,
});

const generateMarksSuggestionsFlow = ai.defineFlow(
  {
    name: 'generateMarksSuggestionsFlow',
    inputSchema: GenerateMarksSuggestionsInputSchema,
    outputSchema: GenerateMarksSuggestionsOutputSchema,
  },
  async input => {
    const {output} = await generateMarksSuggestionsPrompt(input);
    return output!;
  }
);
